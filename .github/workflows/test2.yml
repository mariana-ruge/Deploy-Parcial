name: Tests & Deploy via EC2 (Zappa)

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-html moto boto3 pymysql requests

      - name: Run tests with report
        run: |
          source .venv/bin/activate
          mkdir -p reports
          PYTHONPATH=. pytest -v --html=reports/report.html --self-contained-html

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: reports/report.html

  deploy:
    name: Deploy on EC2 with Zappa
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest

    env:
      # Si no defines la variable, usará 'prod'
      ZAPPA_STAGE: ${{ vars.ZAPPA_STAGE || 'prod' }}

    steps:
      - name: Checkout (metadata)
      # No necesitamos el código local para el deploy remoto, pero mantiene contexto de commit
        uses: actions/checkout@v4

      # --- Diagnóstico de conectividad antes de ssh-keyscan ---
      - name: Debug EC2 connectivity
        run: |
          echo "Resolviendo host..."
          getent hosts "${{ secrets.EC2_HOST }}" || true
          echo "Probando ICMP (puede fallar si está bloqueado)..."
          ping -c 2 "${{ secrets.EC2_HOST }}" || true
          echo "Probando puerto 22..."
          timeout 8 bash -lc "echo > /dev/tcp/${{ secrets.EC2_HOST }}/22" \
            && echo "✅ Port 22 is open" || (echo "❌ Port 22 closed/unreachable" && exit 1)

      # --- Configurar SSH con clave privada desde Secrets ---
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Espera hasta 30s por respuesta para poblar known_hosts
          ssh-keyscan -T 30 -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '✅ SSH connection works!'"

      # --- Despliegue remoto: git pull por SSH + Zappa desde la EC2 ---
      - name: Remote deploy (git pull + zappa)
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          PROJECT_DIR: ${{ secrets.EC2_PROJECT_DIR }}     # ej: /opt/myapp
          REPO_SSH: ${{ secrets.REPO_SSH }}               # ej: git@github.com:owner/repo.git
          ZAPPA_STAGE: ${{ vars.ZAPPA_STAGE || 'prod' }}
        run: |
          ssh -i ~/.ssh/id_rsa "$EC2_USER@$EC2_HOST" <<'EOF'
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive

          # ---- Paquetes básicos según distro ----
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y git python3-venv python3-pip
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y git python3-pip
            python3 -m pip install --upgrade pip
          fi

          # ---- Directorio del proyecto ----
          mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"

          # ---- Clonar o actualizar repo por SSH ----
          if [ ! -d .git ]; then
            echo "Clonando repo en $PROJECT_DIR ..."
            git clone "$REPO_SSH" .
          else
            echo "Repo existente; actualizando remote origin..."
            git remote set-url origin "$REPO_SSH"
          fi

          git fetch origin
          git checkout main
          git pull --ff-only origin main

          # ---- Virtualenv + dependencias ----
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install "zappa>=0.56"

          # ---- Despliegue/Actualización con Zappa ----
          if zappa status "$ZAPPA_STAGE" >/dev/null 2>&1; then
            echo "Actualizando stage: $ZAPPA_STAGE"
            zappa update "$ZAPPA_STAGE" --yes
          else
            echo "Desplegando stage: $ZAPPA_STAGE"
            zappa deploy "$ZAPPA_STAGE" --yes
          fi

          # ---- Log rápido para diagnóstico ----
          zappa tail "$ZAPPA_STAGE" --since 1m || true
          EOF
